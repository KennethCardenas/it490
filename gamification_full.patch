diff --git a/it490/images/badges/first_behavior_log.png b/it490/images/badges/first_behavior_log.png
new file mode 100644
index 0000000000000000000000000000000000000000..6fc1623d1ddaf3dbcc25b89e86105d3e909aa9bc
GIT binary patch
literal 66
zcmeAS@N?(olHy`uVBq!ia0vp^j3CUx0wlM}@Gt=>Zci7-kcwN$fBrKuFflVS&0PQ#
OWbkzLb6Mw<&;$To;0)ma

literal 0
HcmV?d00001

diff --git a/it490/images/badges/first_care_log.png b/it490/images/badges/first_care_log.png
new file mode 100644
index 0000000000000000000000000000000000000000..6fc1623d1ddaf3dbcc25b89e86105d3e909aa9bc
GIT binary patch
literal 66
zcmeAS@N?(olHy`uVBq!ia0vp^j3CUx0wlM}@Gt=>Zci7-kcwN$fBrKuFflVS&0PQ#
OWbkzLb6Mw<&;$To;0)ma

literal 0
HcmV?d00001

diff --git a/it490/images/badges/first_med_schedule.png b/it490/images/badges/first_med_schedule.png
new file mode 100644
index 0000000000000000000000000000000000000000..6fc1623d1ddaf3dbcc25b89e86105d3e909aa9bc
GIT binary patch
literal 66
zcmeAS@N?(olHy`uVBq!ia0vp^j3CUx0wlM}@Gt=>Zci7-kcwN$fBrKuFflVS&0PQ#
OWbkzLb6Mw<&;$To;0)ma

literal 0
HcmV?d00001

diff --git a/it490/images/badges/first_task_complete.png b/it490/images/badges/first_task_complete.png
new file mode 100644
index 0000000000000000000000000000000000000000..6fc1623d1ddaf3dbcc25b89e86105d3e909aa9bc
GIT binary patch
literal 66
zcmeAS@N?(olHy`uVBq!ia0vp^j3CUx0wlM}@Gt=>Zci7-kcwN$fBrKuFflVS&0PQ#
OWbkzLb6Mw<&;$To;0)ma

literal 0
HcmV?d00001

diff --git a/it490/includes/mq_client.php b/it490/includes/mq_client.php
index 0b5be21a44d8f0371e05bdf22d6a1f2f0960d989..211b6b8c64562ea2430b889d58730ae9ecfc6e47 100644
--- a/it490/includes/mq_client.php
+++ b/it490/includes/mq_client.php
@@ -63,57 +63,117 @@ function sendMessage(array $payload): array {
 
         case 'get_tasks':
             if (empty($payload['dog_id'])) {
                 throw new InvalidArgumentException('dog_id is required');
             }
             break;
 
         case 'toggle_task':
             if (empty($payload['task_id'])) {
                 throw new InvalidArgumentException('task_id is required');
             }
             break;
 
         case 'logout':
             if (empty($payload['user_id'])) {
                 throw new InvalidArgumentException("user_id is required for logout");
             }
             break;
 
             case 'get_water':
                 if (empty($payload['dog_id'])) {
                     throw new InvalidArgumentException('dog_id is required');
                 }
                 break;
                 
-            case 'add_water':
-                foreach (['dog_id','user_id','amount'] as $f) {
-                    if (empty($payload[$f])) {
-                        throw new InvalidArgumentException("$f is required");
-                    }
+        case 'add_water':
+            foreach (['dog_id','user_id','amount'] as $f) {
+                if (empty($payload[$f])) {
+                    throw new InvalidArgumentException("$f is required");
                 }
-                break;
+            }
+            break;
+
+        case 'add_care_log':
+            foreach (['dog_id','user_id','note'] as $f) {
+                if (empty($payload[$f])) {
+                    throw new InvalidArgumentException("$f is required");
+                }
+            }
+            break;
+
+        case 'get_care_logs':
+            if (empty($payload['dog_id'])) {
+                throw new InvalidArgumentException('dog_id is required');
+            }
+            break;
+
+        case 'schedule_medication':
+            foreach (['dog_id','user_id','medication','schedule_time'] as $f) {
+                if (empty($payload[$f])) {
+                    throw new InvalidArgumentException("$f is required");
+                }
+            }
+            break;
+
+        case 'complete_medication':
+            if (empty($payload['med_id'])) {
+                throw new InvalidArgumentException('med_id is required');
+            }
+            break;
+
+        case 'get_medications':
+            if (empty($payload['dog_id'])) {
+                throw new InvalidArgumentException('dog_id is required');
+            }
+            break;
+
+        case 'add_behavior':
+            foreach (['dog_id','user_id','behavior'] as $f) {
+                if (empty($payload[$f])) {
+                    throw new InvalidArgumentException("$f is required");
+                }
+            }
+            break;
+
+        case 'get_behaviors':
+            if (empty($payload['dog_id'])) {
+                throw new InvalidArgumentException('dog_id is required');
+            }
+            break;
+
+        case 'get_points':
+            if (empty($payload['user_id'])) {
+                throw new InvalidArgumentException('user_id is required');
+            }
+            break;
+
+        case 'get_achievements':
+            if (empty($payload['user_id'])) {
+                throw new InvalidArgumentException('user_id is required');
+            }
+            break;
 
         default:
             throw new InvalidArgumentException("Unsupported message type: {$payload['type']}");
     }
 
     try {
         $connection = new AMQPStreamConnection('100.87.203.113', 5672, 'kac63', 'Linklinkm1!');
         $channel = $connection->channel();
         $channel->queue_declare('user_request_queue', false, false, false, false);
 
         list($callbackQueue,) = $channel->queue_declare('', false, false, true, true);
         $corrId = uniqid();
 
         $msg = new AMQPMessage(json_encode($payload), [
             'correlation_id' => $corrId,
             'reply_to' => $callbackQueue
         ]);
 
         $channel->basic_publish($msg, '', 'user_request_queue');
 
         $response = null;
 
         $channel->basic_consume($callbackQueue, '', false, true, true, false,
             function ($rep) use (&$response, $corrId) {
                 if ($rep->get('correlation_id') === $corrId) {
diff --git a/it490/navbar.php b/it490/navbar.php
index 96f5ff648fbea630cf1ce239c0db56c287627108..bbf3d0c582c68f3db97ad81d32f9ecf580e6b8f8 100644
--- a/it490/navbar.php
+++ b/it490/navbar.php
@@ -1,50 +1,54 @@
 <?php include_once("auth.php"); ?>
 <?php if (!defined('NAVBAR_INCLUDED')) define('NAVBAR_INCLUDED', true); ?>
 <nav class="navbar">
             <div class="navbar-toggle" id="mobile-menu">
                 <span class="bar"></span>
                 <span class="bar"></span>
                 <span class="bar"></span>
             </div>
             
             <div class="navbar-menu">
                 <div class="navbar-links">
                     <a href="/it490/pages/landing.php" class="nav-link">
                         <i class="fas fa-home"></i>
                         <span>Home</span>
                     </a>
                     
                     <?php if (isAuthenticated()): ?>
                         <a href="/it490/pages/profile.php" class="nav-link">
                             <i class="fas fa-user"></i>
                             <span>Profile</span>
                         </a>
                         <a href="/it490/pages/dogs.php" class="nav-link">
                             <i class="fas fa-paw"></i>
                             <span>Dogs</span>
                         </a>
+                        <a href="/it490/pages/gamification.php" class="nav-link">
+                            <i class="fas fa-star"></i>
+                            <span>Points</span>
+                        </a>
                         <a href="/it490/pages/logout.php" class="nav-link">
                             <i class="fas fa-sign-out-alt"></i>
                             <span>Logout</span>
                         </a>
                     <?php else: ?>
                         <a href="/it490/pages/register.php" class="nav-link">
                             <i class="fas fa-user-plus"></i>
                             <span>Register</span>
                         </a>
                         <a href="/it490/pages/login.php" class="nav-link">
                             <i class="fas fa-sign-in-alt"></i>
                             <span>Login</span>
                         </a>
                     <?php endif; ?>
                 </div>
             </div>
         </div>
     </nav>
 
 <script>
     // Mobile menu toggle
     const mobileMenu = document.getElementById('mobile-menu');
     const navbarMenu = document.querySelector('.navbar-menu');
 
     mobileMenu?.addEventListener('click', function() {
diff --git a/it490/pages/behavior.php b/it490/pages/behavior.php
new file mode 100644
index 0000000000000000000000000000000000000000..01d4f18aa1e581e8f0b69afafe77945361781ed9
--- /dev/null
+++ b/it490/pages/behavior.php
@@ -0,0 +1,57 @@
+<?php
+include_once __DIR__ . '/../auth.php';
+requireAuth();
+
+$user = $_SESSION['user'];
+include_once __DIR__ . '/../includes/mq_client.php';
+
+$dogId = intval($_GET['dog_id'] ?? 0);
+if (!$dogId) { die('Dog not specified'); }
+
+$behResp = [];
+$msg = trim($_GET['msg'] ?? '');
+
+if ($_SERVER['REQUEST_METHOD'] === 'POST') {
+    $payload = [
+        'type' => 'add_behavior',
+        'dog_id' => $dogId,
+        'user_id' => $user['id'],
+        'behavior' => trim($_POST['behavior']),
+        'notes' => trim($_POST['notes'])
+    ];
+    $behResp = sendMessage($payload);
+    $redirectMsg = urlencode($behResp['message'] ?? '');
+    header("Location: behavior.php?dog_id={$dogId}&msg={$redirectMsg}");
+    exit();
+}
+
+if ($msg) { $behResp['message'] = $msg; }
+
+$entries = [];
+$resp = sendMessage(['type' => 'get_behaviors', 'dog_id' => $dogId]);
+if ($resp['status'] === 'success') { $entries = $resp['behaviors']; }
+?>
+<?php $title = "Behavior"; include_once __DIR__ . '/../header.php'; ?>
+<div class="behavior-container">
+    <h2>Behavior Logs for Dog #<?= $dogId ?></h2>
+    <?php if (!empty($behResp['message'])): ?>
+        <p><?= htmlspecialchars($behResp['message']) ?></p>
+    <?php endif; ?>
+    <table>
+        <tr><th>Behavior</th><th>Notes</th><th>Time</th></tr>
+        <?php foreach ($entries as $e): ?>
+            <tr>
+                <td><?= htmlspecialchars($e['behavior']) ?></td>
+                <td><?= htmlspecialchars($e['notes']) ?></td>
+                <td><?= htmlspecialchars($e['created_at']) ?></td>
+            </tr>
+        <?php endforeach; ?>
+    </table>
+    <h3>Add Entry</h3>
+    <form method="POST">
+        <input type="text" name="behavior" placeholder="Behavior" required>
+        <textarea name="notes" placeholder="Notes"></textarea>
+        <button type="submit">Add</button>
+    </form>
+</div>
+<?php include_once __DIR__ . '/../footer.php'; ?>
diff --git a/it490/pages/care.php b/it490/pages/care.php
new file mode 100644
index 0000000000000000000000000000000000000000..1693d391d31cafb4129fb2f5ce1793241bc0e93c
--- /dev/null
+++ b/it490/pages/care.php
@@ -0,0 +1,63 @@
+<?php
+include_once __DIR__ . '/../auth.php';
+requireAuth();
+
+$user = $_SESSION['user'];
+include_once __DIR__ . '/../includes/mq_client.php';
+
+$dogId = intval($_GET['dog_id'] ?? 0);
+if (!$dogId) {
+    die('Dog not specified');
+}
+
+$careResp = [];
+$msg = trim($_GET['msg'] ?? '');
+
+if ($_SERVER['REQUEST_METHOD'] === 'POST') {
+    $payload = [
+        'type' => 'add_care_log',
+        'dog_id' => $dogId,
+        'user_id' => $user['id'],
+        'note' => trim($_POST['note'])
+    ];
+    $careResp = sendMessage($payload);
+    $redirectMsg = urlencode($careResp['message'] ?? '');
+    header("Location: care.php?dog_id={$dogId}&msg={$redirectMsg}");
+    exit();
+}
+
+if ($msg) {
+    $careResp['message'] = $msg;
+}
+
+$logs = [];
+$resp = sendMessage(['type' => 'get_care_logs', 'dog_id' => $dogId]);
+if ($resp['status'] === 'success') {
+    $logs = $resp['logs'];
+}
+?>
+<?php
+$title = "Care Logs";
+include_once __DIR__ . '/../header.php';
+?>
+<div class="care-container">
+    <h2>Care Logs for Dog #<?= $dogId ?></h2>
+    <?php if (!empty($careResp['message'])): ?>
+        <p><?= htmlspecialchars($careResp['message']) ?></p>
+    <?php endif; ?>
+    <table>
+        <tr><th>Note</th><th>Time</th></tr>
+        <?php foreach ($logs as $l): ?>
+            <tr>
+                <td><?= htmlspecialchars($l['note']) ?></td>
+                <td><?= htmlspecialchars($l['created_at']) ?></td>
+            </tr>
+        <?php endforeach; ?>
+    </table>
+    <h3>Add Log</h3>
+    <form method="POST">
+        <textarea name="note" required></textarea>
+        <button type="submit">Add</button>
+    </form>
+</div>
+<?php include_once __DIR__ . '/../footer.php'; ?>
diff --git a/it490/pages/dogs.php b/it490/pages/dogs.php
index 9d900841876520985d79d2be5f44707ab65dd956..9d9a7ee8bb78622ac3f94052d1e3b2bcd278a992 100644
--- a/it490/pages/dogs.php
+++ b/it490/pages/dogs.php
@@ -39,40 +39,43 @@ $dogs = [];
 $stmt = $conn->prepare("SELECT * FROM DOGS WHERE owner_id = ?");
 
 $stmt->bind_param("i", $user['id']);
 if ($stmt->execute()) {
     $res = $stmt->get_result();
     $dogs = $res->fetch_all(MYSQLI_ASSOC);
 }
 $stmt->close();
 ?>
 <?php
     $title = "My Dogs";
     $pageCss = '/it490/styles/dogs.css';
     include_once __DIR__ . '/../header.php';
 ?>
 <div class="dogs-container">
     <h2>Your Dogs</h2>
     <?php if (!empty($addMessage)): ?>
         <p><?= htmlspecialchars($addMessage) ?></p>
     <?php endif; ?>
     <ul>
         <?php foreach ($dogs as $d): ?>
             <li>
                 <strong><?= htmlspecialchars($d['name']) ?></strong> (<?= htmlspecialchars($d['breed']) ?>)
                 - <a href="tasks.php?dog_id=<?= $d['id'] ?>">Tasks</a>
                 - <a href="water.php?dog_id=<?= $d['id'] ?>">Water</a>
+                - <a href="care.php?dog_id=<?= $d['id'] ?>">Care Logs</a>
+                - <a href="medications.php?dog_id=<?= $d['id'] ?>">Medications</a>
+                - <a href="behavior.php?dog_id=<?= $d['id'] ?>">Behavior</a>
             </li>
         <?php endforeach; ?>
     </ul>
 
     <h3>Add Dog</h3>
     <form method="POST">
         <input type="text" name="name" placeholder="Name" required>
         <input type="text" name="breed" placeholder="Breed">
         <input type="text" name="health_status" placeholder="Health Status">
         <textarea name="notes" placeholder="Care instructions"></textarea>
         <button type="submit">Add Dog</button>
     </form>
 </div>
 <?php $conn->close(); ?>
 <?php include_once __DIR__ . '/../footer.php'; ?>
diff --git a/it490/pages/gamification.php b/it490/pages/gamification.php
new file mode 100644
index 0000000000000000000000000000000000000000..2801103816cfc45da4b84f58497372d1ac80dfee
--- /dev/null
+++ b/it490/pages/gamification.php
@@ -0,0 +1,31 @@
+<?php
+include_once __DIR__ . '/../auth.php';
+requireAuth();
+include_once __DIR__ . '/../includes/mq_client.php';
+
+$user = $_SESSION['user'];
+$resp = sendMessage(['type' => 'get_points', 'user_id' => $user['id']]);
+$points = ($resp['status'] === 'success') ? $resp['points'] : 0;
+$achResp = sendMessage(['type' => 'get_achievements', 'user_id' => $user['id']]);
+$achievements = ($achResp['status'] === 'success') ? $achResp['achievements'] : [];
+?>
+<?php $title = "Gamification"; include_once __DIR__ . '/../header.php'; ?>
+<div class="points-container">
+    <h2>Your Points</h2>
+    <p><?= $points ?></p>
+</div>
+<div class="achievements-container">
+    <h3>Your Badges</h3>
+    <ul class="badge-list">
+        <?php foreach ($achievements as $a): ?>
+            <li class="badge-item">
+                <img src="<?= htmlspecialchars($a['badge_img']) ?>" alt="<?= htmlspecialchars($a['name']) ?>" width="80" height="80">
+                <div>
+                    <strong><?= htmlspecialchars($a['name']) ?></strong><br>
+                    <span><?= htmlspecialchars($a['description']) ?></span>
+                </div>
+            </li>
+        <?php endforeach; ?>
+    </ul>
+</div>
+<?php include_once __DIR__ . '/../footer.php'; ?>
diff --git a/it490/pages/medications.php b/it490/pages/medications.php
new file mode 100644
index 0000000000000000000000000000000000000000..2628c46420e80ff45b3cb4fb2ab25fdbd193f6b5
--- /dev/null
+++ b/it490/pages/medications.php
@@ -0,0 +1,69 @@
+<?php
+include_once __DIR__ . '/../auth.php';
+requireAuth();
+
+$user = $_SESSION['user'];
+include_once __DIR__ . '/../includes/mq_client.php';
+
+$dogId = intval($_GET['dog_id'] ?? 0);
+if (!$dogId) { die('Dog not specified'); }
+
+$medResp = [];
+$msg = trim($_GET['msg'] ?? '');
+
+if ($_SERVER['REQUEST_METHOD'] === 'POST') {
+    $payload = [
+        'type' => 'schedule_medication',
+        'dog_id' => $dogId,
+        'user_id' => $user['id'],
+        'medication' => trim($_POST['medication']),
+        'dosage' => trim($_POST['dosage']),
+        'schedule_time' => trim($_POST['schedule_time']),
+        'notes' => trim($_POST['notes'])
+    ];
+    $medResp = sendMessage($payload);
+    $redirectMsg = urlencode($medResp['message'] ?? '');
+    header("Location: medications.php?dog_id={$dogId}&msg={$redirectMsg}");
+    exit();
+}
+
+if ($msg) { $medResp['message'] = $msg; }
+
+$meds = [];
+$resp = sendMessage(['type' => 'get_medications', 'dog_id' => $dogId]);
+if ($resp['status'] === 'success') { $meds = $resp['medications']; }
+
+if (isset($_GET['complete'])) {
+    sendMessage(['type' => 'complete_medication', 'med_id' => intval($_GET['complete'])]);
+    header('Location: medications.php?dog_id=' . $dogId);
+    exit();
+}
+?>
+<?php $title = "Medications"; include_once __DIR__ . '/../header.php'; ?>
+<div class="med-container">
+    <h2>Medication Schedule for Dog #<?= $dogId ?></h2>
+    <?php if (!empty($medResp['message'])): ?>
+        <p><?= htmlspecialchars($medResp['message']) ?></p>
+    <?php endif; ?>
+    <table>
+        <tr><th>Medication</th><th>Dosage</th><th>Time</th><th>Status</th><th></th></tr>
+        <?php foreach ($meds as $m): ?>
+            <tr>
+                <td><?= htmlspecialchars($m['medication']) ?></td>
+                <td><?= htmlspecialchars($m['dosage']) ?></td>
+                <td><?= htmlspecialchars($m['schedule_time']) ?></td>
+                <td><?= $m['completed'] ? 'Done' : 'Pending' ?></td>
+                <td><?php if(!$m['completed']): ?><a href="?dog_id=<?= $dogId ?>&complete=<?= $m['id'] ?>">Mark Done</a><?php endif; ?></td>
+            </tr>
+        <?php endforeach; ?>
+    </table>
+    <h3>Schedule Medication</h3>
+    <form method="POST">
+        <input type="text" name="medication" placeholder="Medication" required>
+        <input type="text" name="dosage" placeholder="Dosage">
+        <input type="datetime-local" name="schedule_time" required>
+        <textarea name="notes" placeholder="Notes"></textarea>
+        <button type="submit">Add</button>
+    </form>
+</div>
+<?php include_once __DIR__ . '/../footer.php'; ?>
diff --git a/it490/styles/style.css b/it490/styles/style.css
index 930499b8e073e2d5f90bfbd260df82462c8886c5..935865154db0164871c468bb9aa7013a3479f35b 100644
--- a/it490/styles/style.css
+++ b/it490/styles/style.css
@@ -872,26 +872,29 @@ body {
 }
 
 .add-water input[type="number"] {
   width: 100%;
   padding: 0.5rem;
   border: 1px solid #ccc;
   border-radius: 4px;
 }
 
 .add-water textarea {
   width: 100%;
   padding: 0.5rem;
   border: 1px solid #ccc;
   border-radius: 4px;
   min-height: 100px;
 }
 
 .add-water button {
   padding: 0.5rem 1rem;
   background-color: #0077cc;
   color: white;
   border: none;
   border-radius: 4px;
   cursor: pointer;
 }
-}
\ No newline at end of file
+}
+.badge-list{list-style:none;padding:0;display:flex;flex-wrap:wrap;gap:1rem;}
+.badge-item{display:flex;align-items:center;gap:0.5rem;background:#fff;padding:0.5rem;border:1px solid #ddd;border-radius:4px;}
+.badge-item img{display:block;}
diff --git a/it490/workers/mq_worker.php b/it490/workers/mq_worker.php
index 9e49a03d0237a942eb226db0ba0f83eb97d66fa9..ebe3e652d440242eb32a57c134d4bfbc2dcfba08 100644
--- a/it490/workers/mq_worker.php
+++ b/it490/workers/mq_worker.php
@@ -19,50 +19,64 @@ function validateEmailOrUsername($input) {
     return filter_var($input, FILTER_VALIDATE_EMAIL)
         ? ['field' => 'email', 'value' => $input]
         : ['field' => 'username', 'value' => $input];
 }
 
 function checkDuplicateCredentials($conn, $username, $email, $excludeUserId = null) {
     $errors = [];
 
     $query = "SELECT id FROM USERS WHERE username = ?";
     if ($excludeUserId) $query .= " AND id != ?";
     $stmt = $conn->prepare($query);
     $excludeUserId ? $stmt->bind_param("si", $username, $excludeUserId) : $stmt->bind_param("s", $username);
     $stmt->execute();
     if ($stmt->get_result()->num_rows > 0) $errors[] = "Username already exists";
 
     $query = "SELECT id FROM USERS WHERE email = ?";
     if ($excludeUserId) $query .= " AND id != ?";
     $stmt = $conn->prepare($query);
     $excludeUserId ? $stmt->bind_param("si", $email, $excludeUserId) : $stmt->bind_param("s", $email);
     $stmt->execute();
     if ($stmt->get_result()->num_rows > 0) $errors[] = "Email already exists";
 
     return $errors;
 }
 
+function awardAchievement(mysqli $conn, int $userId, string $code): void {
+    $stmt = $conn->prepare("SELECT id FROM ACHIEVEMENTS WHERE code = ?");
+    $stmt->bind_param("s", $code);
+    $stmt->execute();
+    $ach = $stmt->get_result()->fetch_assoc();
+    if (!$ach) {
+        return; // achievement not defined
+    }
+    $aid = $ach['id'];
+    $stmt = $conn->prepare("INSERT IGNORE INTO USER_ACHIEVEMENTS (user_id, achievement_id) VALUES (?, ?)");
+    $stmt->bind_param("ii", $userId, $aid);
+    $stmt->execute();
+}
+
 try {
     $connection = new AMQPStreamConnection('100.87.203.113', 5672, 'kac63', 'Linklinkm1!');
     echo " [*] Connected to RabbitMQ at 100.87.203.113\n";
 } catch (Exception $e) {
     echo " [!] Failed to connect to RabbitMQ: " . $e->getMessage() . "\n";
     exit(1);
 }
 
 $channel = $connection->channel();
 $channel->queue_declare('user_request_queue', false, false, false, false);
 
 echo " [*] Waiting for messages on 'user_request_queue'. To exit press CTRL+C\n";
 
 $callback = function ($msg) use ($channel, $conn) {
     try {
         $payload = json_decode($msg->body, true);
         $response = ['status' => 'error', 'message' => 'Unknown action'];
         echo " [x] Processing: " . ($payload['type'] ?? 'unknown') . "\n";
 
         switch ($payload['type'] ?? '') {
             case 'login':
                 $credential = validateEmailOrUsername($payload['username']);
                 $query = "SELECT id, username, email, password FROM USERS WHERE {$credential['field']} = ?";
                 $stmt = $conn->prepare($query);
                 $stmt->bind_param("s", $credential['value']);
@@ -219,86 +233,200 @@ $callback = function ($msg) use ($channel, $conn) {
                             $res = $stmt->get_result();
                             $dogs = $res->fetch_all(MYSQLI_ASSOC);
                             $response = ['status' => 'success', 'dogs' => $dogs];
                             break;
             
                         case 'add_task':
                             $stmt = $conn->prepare("INSERT INTO DOG_TASKS (dog_id, user_id, title, description, due_date) VALUES (?, ?, ?, ?, ?)");
                             $stmt->bind_param("iisss", $payload['dog_id'], $payload['user_id'], $payload['title'], $payload['description'], $payload['due_date']);
                             if ($stmt->execute()) {
                                 $response = ['status' => 'success', 'message' => 'Task added'];
                                 echo " [+] Task added for dog {$payload['dog_id']}\n";
                             } else {
                                 $response['message'] = 'Failed to add task: ' . $conn->error;
                                 echo " [-] Task add failed\n";
                             }
                             break;
             
                         case 'get_tasks':
                             $stmt = $conn->prepare("SELECT * FROM DOG_TASKS WHERE dog_id = ? ORDER BY due_date");
                             $stmt->bind_param("i", $payload['dog_id']);
                             $stmt->execute();
                             $tasks = $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
                             $response = ['status' => 'success', 'tasks' => $tasks];
                             break;
             
-                        case 'toggle_task':
+                case 'toggle_task':
+                            $stmt = $conn->prepare("SELECT completed, user_id FROM DOG_TASKS WHERE id = ?");
+                            $stmt->bind_param("i", $payload['task_id']);
+                            $stmt->execute();
+                            $row = $stmt->get_result()->fetch_assoc();
+                            $completed = (int)($row['completed'] ?? 0);
+                            $userForPoints = (int)($row['user_id'] ?? 0);
+
                             $stmt = $conn->prepare("UPDATE DOG_TASKS SET completed = NOT completed WHERE id = ?");
                             $stmt->bind_param("i", $payload['task_id']);
                             $stmt->execute();
                             $response = ['status' => 'success'];
+
+                            if ($completed === 0 && $userForPoints) {
+                                $stmt = $conn->prepare("INSERT INTO USER_POINTS (user_id, points) VALUES (?, 10) ON DUPLICATE KEY UPDATE points = points + 10");
+                                $stmt->bind_param("i", $userForPoints);
+                                $stmt->execute();
+                                awardAchievement($conn, $userForPoints, 'first_task_complete');
+                            }
                             break;
             case 'logout':
                 if (!empty($payload['user_id'])) {
                     echo " [+] Logout event for user ID: {$payload['user_id']}\n";
                     $response = ['status' => 'success', 'message' => 'Logout recorded'];
                 } else {
                     $response['message'] = 'User ID missing for logout';
                     echo " [-] Logout failed: Missing user ID\n";
                 }
                 break;
 
                 case 'add_water':
                     $stmt = $conn->prepare("INSERT INTO WATER_TRACKING (dog_id, user_id, amount_ml, notes) VALUES (?, ?, ?, ?)");
                     $stmt->bind_param("iiis", $payload['dog_id'], $payload['user_id'], $payload['amount'], $payload['notes']);
                     if ($stmt->execute()) {
                         $response = ['status' => 'success', 'message' => 'Water entry added'];
                         echo " [+] Water entry added for dog {$payload['dog_id']}\n";
                     } else {
                         $response['message'] = 'Failed to add water entry: ' . $conn->error;
                         echo " [-] Water entry add failed\n";
                     }
                     break;
                 
                 case 'get_water':
                     $stmt = $conn->prepare("SELECT * FROM WATER_TRACKING WHERE dog_id = ? ORDER BY timestamp DESC");
                     $stmt->bind_param("i", $payload['dog_id']);
                     $stmt->execute();
                     $waterEntries = $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
                     $response = ['status' => 'success', 'entries' => $waterEntries];
                     break;
 
+                case 'add_care_log':
+                    $stmt = $conn->prepare("INSERT INTO CARE_LOGS (dog_id, user_id, note) VALUES (?, ?, ?)");
+                    $stmt->bind_param("iis", $payload['dog_id'], $payload['user_id'], $payload['note']);
+                    if ($stmt->execute()) {
+                        $response = ['status' => 'success', 'message' => 'Care log added'];
+                        $stmt = $conn->prepare("INSERT INTO USER_POINTS (user_id, points) VALUES (?, 5) ON DUPLICATE KEY UPDATE points = points + 5");
+                        $stmt->bind_param("i", $payload['user_id']);
+                        $stmt->execute();
+                        awardAchievement($conn, $payload['user_id'], 'first_care_log');
+                    } else {
+                        $response['message'] = 'Failed to add care log: ' . $conn->error;
+                    }
+                    break;
+
+                case 'get_care_logs':
+                    $stmt = $conn->prepare("SELECT * FROM CARE_LOGS WHERE dog_id = ? ORDER BY created_at DESC");
+                    $stmt->bind_param("i", $payload['dog_id']);
+                    $stmt->execute();
+                    $careLogs = $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
+                    $response = ['status' => 'success', 'logs' => $careLogs];
+                    break;
+
+                case 'schedule_medication':
+                    $stmt = $conn->prepare("INSERT INTO MEDICATION_SCHEDULES (dog_id, user_id, medication, dosage, schedule_time, notes) VALUES (?, ?, ?, ?, ?, ?)");
+                    $stmt->bind_param("iissss", $payload['dog_id'], $payload['user_id'], $payload['medication'], $payload['dosage'], $payload['schedule_time'], $payload['notes']);
+                    if ($stmt->execute()) {
+                        $response = ['status' => 'success', 'message' => 'Medication scheduled'];
+                        $stmt = $conn->prepare("INSERT INTO USER_POINTS (user_id, points) VALUES (?, 5) ON DUPLICATE KEY UPDATE points = points + 5");
+                        $stmt->bind_param("i", $payload['user_id']);
+                        $stmt->execute();
+                        awardAchievement($conn, $payload['user_id'], 'first_med_schedule');
+                    } else {
+                        $response['message'] = 'Failed to schedule medication: ' . $conn->error;
+                    }
+                    break;
+
+                case 'complete_medication':
+                    $stmt = $conn->prepare("UPDATE MEDICATION_SCHEDULES SET completed = 1 WHERE id = ?");
+                    $stmt->bind_param("i", $payload['med_id']);
+                    $stmt->execute();
+                    $response = ['status' => 'success'];
+                    if ($stmt->affected_rows > 0) {
+                        $stmt = $conn->prepare("SELECT user_id FROM MEDICATION_SCHEDULES WHERE id = ?");
+                        $stmt->bind_param("i", $payload['med_id']);
+                        $stmt->execute();
+                        $uid = $stmt->get_result()->fetch_assoc()['user_id'] ?? 0;
+                        if ($uid) {
+                            $stmt = $conn->prepare("INSERT INTO USER_POINTS (user_id, points) VALUES (?, 5) ON DUPLICATE KEY UPDATE points = points + 5");
+                            $stmt->bind_param("i", $uid);
+                            $stmt->execute();
+                        }
+                    }
+                    break;
+
+                case 'get_medications':
+                    $stmt = $conn->prepare("SELECT * FROM MEDICATION_SCHEDULES WHERE dog_id = ? ORDER BY schedule_time");
+                    $stmt->bind_param("i", $payload['dog_id']);
+                    $stmt->execute();
+                    $meds = $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
+                    $response = ['status' => 'success', 'medications' => $meds];
+                    break;
+
+                case 'add_behavior':
+                    $stmt = $conn->prepare("INSERT INTO BEHAVIOR_LOGS (dog_id, user_id, behavior, notes) VALUES (?, ?, ?, ?)");
+                    $stmt->bind_param("iiss", $payload['dog_id'], $payload['user_id'], $payload['behavior'], $payload['notes']);
+                    if ($stmt->execute()) {
+                        $response = ['status' => 'success', 'message' => 'Behavior entry added'];
+                        $stmt = $conn->prepare("INSERT INTO USER_POINTS (user_id, points) VALUES (?, 5) ON DUPLICATE KEY UPDATE points = points + 5");
+                        $stmt->bind_param("i", $payload['user_id']);
+                        $stmt->execute();
+                        awardAchievement($conn, $payload['user_id'], 'first_behavior_log');
+                    } else {
+                        $response['message'] = 'Failed to add behavior entry: ' . $conn->error;
+                    }
+                    break;
+
+                case 'get_behaviors':
+                    $stmt = $conn->prepare("SELECT * FROM BEHAVIOR_LOGS WHERE dog_id = ? ORDER BY created_at DESC");
+                    $stmt->bind_param("i", $payload['dog_id']);
+                    $stmt->execute();
+                    $behaviors = $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
+                    $response = ['status' => 'success', 'behaviors' => $behaviors];
+                    break;
+
+                case 'get_points':
+                    $stmt = $conn->prepare("SELECT points FROM USER_POINTS WHERE user_id = ?");
+                    $stmt->bind_param("i", $payload['user_id']);
+                    $stmt->execute();
+                    $points = $stmt->get_result()->fetch_assoc()['points'] ?? 0;
+                    $response = ['status' => 'success', 'points' => (int)$points];
+                    break;
+
+                case 'get_achievements':
+                    $stmt = $conn->prepare("SELECT A.code, A.name, A.description, A.badge_img, UA.earned_at FROM USER_ACHIEVEMENTS UA JOIN ACHIEVEMENTS A ON UA.achievement_id = A.id WHERE UA.user_id = ?");
+                    $stmt->bind_param("i", $payload['user_id']);
+                    $stmt->execute();
+                    $rows = $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
+                    $response = ['status' => 'success', 'achievements' => $rows];
+                    break;
+
             default:
                 $response['message'] = "Unsupported action type";
                 echo " [?] Unknown message type\\n";
                 break;
         }
 
         if ($msg->has('reply_to')) {
             $responseMsg = new AMQPMessage(
                 json_encode($response),
                 ['correlation_id' => $msg->get('correlation_id')]
             );
             $msg->getChannel()->basic_publish($responseMsg, '', $msg->get('reply_to'));
         }
 
 
         $msg->ack();
     } catch (Exception $e) {
         error_log("Error processing message: " . $e->getMessage());
         echo " [!] Error: " . $e->getMessage() . "\\n";
     }
 };
 
 $channel->basic_qos(null, 1, null);
 $channel->basic_consume('user_request_queue', '', false, false, false, false, $callback);
 
diff --git a/qa/setup_db.sh b/qa/setup_db.sh
index dd8ae9a1a0efadb22ed8b2cb55bbe8a426879f76..db68c64220477cbdca2938e84f7859aa549042d1 100644
--- a/qa/setup_db.sh
+++ b/qa/setup_db.sh
@@ -37,28 +37,95 @@ CREATE TABLE IF NOT EXISTS USERS (
 );
 
 CREATE TABLE IF NOT EXISTS DOGS (
     id INT AUTO_INCREMENT PRIMARY KEY,
     user_id INT NOT NULL,
     name VARCHAR(100) NOT NULL,
     breed VARCHAR(100),
     health_status VARCHAR(255),
     notes TEXT,
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     FOREIGN KEY (user_id) REFERENCES USERS(id)
 );
 
 CREATE TABLE IF NOT EXISTS DOG_TASKS (
     id INT AUTO_INCREMENT PRIMARY KEY,
     dog_id INT NOT NULL,
     user_id INT NOT NULL,
     title VARCHAR(100) NOT NULL,
     description TEXT,
     due_date DATETIME,
     completed TINYINT(1) DEFAULT 0,
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     FOREIGN KEY (dog_id) REFERENCES DOGS(id),
     FOREIGN KEY (user_id) REFERENCES USERS(id)
 );
+
+# New tables for care logs, medication scheduling, behavior tracking, and user points
+CREATE TABLE IF NOT EXISTS CARE_LOGS (
+    id INT AUTO_INCREMENT PRIMARY KEY,
+    dog_id INT NOT NULL,
+    user_id INT NOT NULL,
+    note TEXT,
+    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
+    FOREIGN KEY (dog_id) REFERENCES DOGS(id),
+    FOREIGN KEY (user_id) REFERENCES USERS(id)
+);
+
+CREATE TABLE IF NOT EXISTS MEDICATION_SCHEDULES (
+    id INT AUTO_INCREMENT PRIMARY KEY,
+    dog_id INT NOT NULL,
+    user_id INT NOT NULL,
+    medication VARCHAR(100) NOT NULL,
+    dosage VARCHAR(100),
+    schedule_time DATETIME,
+    notes TEXT,
+    completed TINYINT(1) DEFAULT 0,
+    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
+    FOREIGN KEY (dog_id) REFERENCES DOGS(id),
+    FOREIGN KEY (user_id) REFERENCES USERS(id)
+);
+
+CREATE TABLE IF NOT EXISTS BEHAVIOR_LOGS (
+    id INT AUTO_INCREMENT PRIMARY KEY,
+    dog_id INT NOT NULL,
+    user_id INT NOT NULL,
+    behavior VARCHAR(255) NOT NULL,
+    notes TEXT,
+    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
+    FOREIGN KEY (dog_id) REFERENCES DOGS(id),
+    FOREIGN KEY (user_id) REFERENCES USERS(id)
+);
+
+CREATE TABLE IF NOT EXISTS USER_POINTS (
+    user_id INT PRIMARY KEY,
+    points INT DEFAULT 0,
+    FOREIGN KEY (user_id) REFERENCES USERS(id)
+);
+
+# Tables for achievements/badges
+CREATE TABLE IF NOT EXISTS ACHIEVEMENTS (
+    id INT AUTO_INCREMENT PRIMARY KEY,
+    code VARCHAR(50) UNIQUE,
+    name VARCHAR(100) NOT NULL,
+    description TEXT,
+    badge_img VARCHAR(255)
+);
+
+CREATE TABLE IF NOT EXISTS USER_ACHIEVEMENTS (
+    user_id INT NOT NULL,
+    achievement_id INT NOT NULL,
+    earned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
+    PRIMARY KEY (user_id, achievement_id),
+    FOREIGN KEY (user_id) REFERENCES USERS(id),
+    FOREIGN KEY (achievement_id) REFERENCES ACHIEVEMENTS(id)
+);
+
+# default achievements
+INSERT IGNORE INTO ACHIEVEMENTS (code, name, description, badge_img) VALUES
+ ('first_care_log', 'Care Novice', 'Logged your first care entry', '/it490/images/badges/first_care_log.png'),
+ ('first_med_schedule', 'Med Prepper', 'Scheduled your first medication', '/it490/images/badges/first_med_schedule.png'),
+ ('first_behavior_log', 'Behavior Tracker', 'Recorded your first behavior log', '/it490/images/badges/first_behavior_log.png'),
+ ('first_task_complete', 'Task Master', 'Completed your first dog task', '/it490/images/badges/first_task_complete.png');
 EOF
 
 echo "=== [DB SETUP] MySQL DB setup complete ==="
 